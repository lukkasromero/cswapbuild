{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useStake.ts","config/index.ts","components/layout/Flex.tsx","components/Tags.tsx","hooks/useUnstake.ts","hooks/useHarvest.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","useSousStake","sousId","isUsingBnb","dispatch","useDispatch","useWallet","account","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","a","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","txHash","fetchFarmUserDataAsync","console","info","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","SYRUPIDS","useSousUnstake","includes","onUnstake","useUnstake","tokenName","unstake","useHarvest","farmPid","onReward","harvest","useSousHarvest","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","totalBTCValueFormatted","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","decimals","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Number","toFixed","title","disabled","newval","fixForValues","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","lpTokenPrice","rawStakedBalance","getBalanceNumber","log","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","Action","CardActions","farm","ethereum","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isGreaterThan","useEffect","toNumber","lpContract","getContract","onApprove","useApprove","error","textTransform","fontSize","pr","UnlockButton","mt","fullWidth","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","btcPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","WBTC","lpTotalInBTC","undefined","maximumFractionDigits","totalValueFormatted","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","cswapPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact","responsive"],"mappings":"+SAOA,IAuBMA,EAAeC,IAAOC,IAAV,KACN,SAACC,GAAD,OAAWA,EAAMC,QAClB,SAACD,GAAD,OAAWA,EAAMC,QAGbC,EA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjDG,EAAYC,qBAAWC,KAAvBF,QAGR,OAAQH,GACN,IAAK,KACHE,EAAIC,EAAQ,GACZ,MACF,IAAK,KACHD,EAAIC,EAAQ,GACZ,MACF,IAAK,KACL,QACED,EAAIC,EAAQ,GAGhB,OAAO,cAACP,EAAD,CAAcI,KAAME,K,wRClB7B,IAcMI,EAAqBT,IAAOC,IAAV,KAEF,SAACC,GAAD,OAAWA,EAAMQ,MAAMC,OAAOC,eAGvC,SAACV,GAAD,OAAWA,EAAMQ,MAAMJ,QAAQ,MAGtCO,EAAoBb,IAAOC,IAAV,KAKRa,EA3BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUK,OAC3C,OACE,cAACX,EAAD,UACGQ,IAAMC,SAASG,IAAIN,GAAU,SAACO,EAAOC,GAAR,OAC5B,qCACE,cAACV,EAAD,UAAoBS,IACnBC,EAAIP,EAAI,GAAK,cAAC,EAAD,c,gjBCDxB,IAUMQ,EAAqBxB,IAAOC,IAAV,KAEF,SAACC,GAAD,OAAWA,EAAMQ,MAAMC,OAAOc,SACjC,SAACvB,GAAD,OAAWA,EAAMQ,MAAMgB,MAAMC,WAGjC,SAACzB,GAAD,OAAWA,EAAMQ,MAAMJ,QAAQ,MAGxCsB,EAAc5B,IAAOyB,MAAV,KAIN,SAACvB,GAAD,OAAWA,EAAMQ,MAAMC,OAAOkB,WAS1BC,EAhCqB,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAC1F,OACE,eAACX,EAAD,aACKU,GAAkBA,EACrB,cAACN,EAAD,CAAaK,YAAaA,EAAaE,MAAOA,EAAOH,SAAUA,MAC5DD,GAAgBA,M,ilBCDzB,IAiCMK,EAAmBpC,IAAOC,IAAV,KAEhBF,EAAeC,IAAOC,IAAV,KACP,SAACC,GAAD,OAAWA,EAAMQ,MAAMJ,QAAQ,MAGpC+B,EAA8BrC,IAAOC,IAAV,KAK3BqC,EAAgBtC,IAAOC,IAAV,KAER,SAACC,GAAD,OAAWA,EAAMQ,MAAMC,OAAOkB,WAQnCU,EAAoBvC,IAAOwC,KAAV,KACZ,SAACtC,GAAD,OAAWA,EAAMQ,MAAMC,OAAOkB,WAI1BY,EA3D+B,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,IAAKC,EAA6D,EAA7DA,OAAQX,EAAqD,EAArDA,SAAUY,EAA2C,EAA3CA,YAAaT,EAA8B,EAA9BA,MAA8B,IAAvBU,oBAAuB,MAAR,EAAQ,EAC3GC,EAAkBC,cACxB,OACE,eAACX,EAAD,WACE,eAACE,EAAD,WACGI,EAAIM,iBADP,IAC0BL,EAD1B,IACmCG,EAAgB,IAAK,gBAExD,cAAC,EAAD,CACEf,aACE,eAACM,EAAD,WACE,cAACE,EAAD,UAAoBI,IACpB,cAAC5C,EAAD,IACA,8BACE,cAAC,IAAD,CAAQI,KAAK,KAAK8C,QAASL,EAA3B,SACGE,EAAgB,IAAK,cAK9Bd,SAAUA,EACVC,YAAY,IACZE,MAAOA,IAERU,EAAe,EACd,eAACP,EAAD,WACGQ,EAAgB,MAAO,eAD1B,KAC4C,IAAII,IAAUf,GAAS,GAAGgB,MAAMN,EAAe,KAAOO,WAAY,IAC3GT,KAED,U,iJCnBGU,EAAe,SAACC,GAAgC,IAAxBC,EAAuB,wDACpDC,EAAWC,cADyC,EAEtCC,cAAZC,EAFkD,EAElDA,QACFC,EAAqBC,cACrBC,EAAmBC,YAAYT,GAE/BU,EAAcC,sBAAW,uCAC7B,WAAOC,GAAP,SAAAC,EAAA,yDACiB,IAAXb,EADN,gCAEUc,YAAMR,EAAoB,EAAGM,EAAQP,GAF/C,kCAGaJ,EAHb,iCAIUc,YAAaP,EAAkBI,EAAQP,GAJjD,gDAMUW,YAAUR,EAAkBI,EAAQP,GAN9C,QAQEH,EAASe,YAAwBjB,EAAQK,IACzCH,EAASgB,YAAkBlB,EAAQK,IATrC,4CAD6B,sDAY7B,CAACA,EAASH,EAAUD,EAAYK,EAAoBE,EAAkBR,IAGxE,MAAO,CAAEmB,QAAST,IAGLU,IAzCE,SAACC,GAChB,IAAMnB,EAAWC,cACTE,EAAYD,cAAZC,QACFC,EAAqBC,cAW3B,MAAO,CAAEY,QATWR,sBAAW,uCAC7B,WAAOC,GAAP,eAAAC,EAAA,sEACuBC,YAAMR,EAAoBe,EAAKT,EAAQP,GAD9D,OACQiB,EADR,OAEEpB,EAASqB,YAAuBlB,IAChCmB,QAAQC,KAAKH,GAHf,2CAD6B,sDAM7B,CAACjB,EAASH,EAAUI,EAAoBe,O,iCClB5C,+CAEAzB,IAAU8B,OAAO,CACfC,eAAgB,IAChBC,eAAgB,KAGY,IAAIhC,IAAU,GAArC,IACMiC,EAAkB,IAAIjC,IAAU,U,oTCN7C,IAAMkC,E,KAAapF,EAAOC,IAAV,KAaDmF,O,oMCZTC,EAAW,kBACf,cAAC,IAAD,CAAKC,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA1C,sBAWIC,EAAU,kBACd,cAAC,IAAD,CAAKH,QAAQ,YAAYC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA5C,mBAKIE,EAAe,kBACnB,cAAC,IAAD,CAAKJ,QAAQ,aAAaC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA7C,wBAKIG,EAAa,kBACjB,cAAC,IAAD,CAAKL,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA1C,uB,iJCQII,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IAErBC,EAAiB,SAACvC,GACZG,cACGC,cAAZC,QACmBE,cACFE,YAAYT,GAClBsC,EAASE,SAASxC,GAqBrC,MAAO,CAAEyC,UAnBa9B,sBAAW,uCAC/B,WAAOC,GAAP,SAAAC,EAAA,0FAD+B,sDAgB/B,MAMW6B,IAvDI,SAACrB,EAAYsB,GAC9B,IAAMzC,EAAWC,cACTE,EAAYD,cAAZC,QACFC,EAAqBC,cAkB3B,MAAO,CAAEkC,UATa9B,sBAAW,uCAC/B,WAAOC,GAAP,eAAAC,EAAA,sEACuB+B,YAAQtC,EAAoBe,EAAKT,EAAQP,EAAQsC,GADxE,OACQrB,EADR,OAEEpB,EAASqB,YAAuBlB,IAChCmB,QAAQC,KAAKH,GAHf,2CAD+B,sDAM/B,CAACjB,EAASH,EAAUI,EAAoBe,EAAIsB,O,yLCvBnCE,EAAa,SAACC,GACzB,IAAM5C,EAAWC,cACTE,EAAYD,cAAZC,QACFC,EAAqBC,cAQ3B,MAAO,CAAEwC,SANapC,sBAAW,sBAAC,4BAAAE,EAAA,sEACXmC,YAAQ1C,EAAoBwC,EAASzC,GAD1B,cAC1BiB,EAD0B,OAEhCpB,EAASqB,YAAuBlB,IAFA,kBAGzBiB,GAHyB,2CAI/B,CAACjB,EAASH,EAAU4C,EAASxC,MAoBrB2C,EAAiB,SAACjD,GAAgC,IAAxBC,EAAuB,wDACtDC,EAAWC,cAD2C,EAExCC,cAAZC,EAFoD,EAEpDA,QACFG,EAAmBC,YAAYT,GAC/BM,EAAqBC,cAErB2C,EAAgBvC,sBAAW,sBAAC,sBAAAE,EAAA,yDACjB,IAAXb,EAD4B,gCAExBgD,YAAQ1C,EAAoB,EAAGD,GAFP,kCAGrBJ,EAHqB,iCAIxBkD,YAAgB3C,EAAkBH,GAJV,gDAMxB+C,YAAa5C,EAAkBH,GANP,QAQhCH,EAASmD,YAAwBrD,EAAQK,IACzCH,EAASgB,YAAkBlB,EAAQK,IATH,4CAU/B,CAACA,EAASH,EAAUD,EAAYK,EAAoBE,EAAkBR,IAEzE,MAAO,CAAE+C,SAAUG,K,4bC7CrB,IAAMI,EAAU5G,IAAOC,IAAV,KAOD,qBAAGS,MAAkBC,OAAOkB,WAIlCgF,EAAkE,SAAC,GAA2B,IAAzB5D,EAAwB,EAAxBA,QAAS6D,EAAe,EAAfA,SAClF,OACE,eAACF,EAAD,CAASG,aAAW,kCAAkCC,KAAK,SAAS/D,QAAS,kBAAMA,KAAnF,UACE,cAAC,IAAD,CAAMgE,MAAM,UAAUC,MAAI,EAA1B,SACGJ,EAAW,OAAS,YAEtBA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCD,EAAwBM,aAAe,CACrCL,UAAU,GAGGD,QCzBAO,EAPkB,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,mBAAoBC,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,eAElEC,EAAiC,QAArBF,EAA6B,MAAQD,EADvCI,KAEVC,EAAaH,EAFHE,KAGhB,MAAM,GAAN,OAAUD,EAAV,YAAuBE,I,2WCczB,IAAMd,EAAU5G,IAAOC,IAAV,KAIP0H,EAAqB3H,YAAO4H,IAAP5H,CAAH,KAGb,qBAAGU,MAAkBC,OAAOkH,QAQ3B,qBAAGnH,MAAkBC,OAAOkB,WAsDzBiG,EAlD0C,SAAC,GAUnD,IATLC,EASI,EATJA,YACAC,EAQI,EARJA,eACAC,EAOI,EAPJA,QACAC,EAMI,EANJA,mBACAC,EAKI,EALJA,uBACAC,EAII,EAJJA,QACAf,EAGI,EAHJA,mBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,eAEMzE,EAAkBC,cAClBsF,EAAwBjB,EAAyB,CAAEC,qBAAoBC,mBAAkBC,mBAE/F,OACE,eAAC,EAAD,WACE,eAAC,IAAD,CAAMe,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOxF,EAAgB,IAAK,SAA5B,OACA,cAAC6E,EAAD,CACEY,KACER,EAAW,4CAC8BR,EAAeE,MAD7C,2CAE6BY,GAJ5C,SAOGD,QAGHH,GACA,eAAC,IAAD,CAAMK,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOxF,EAAgB,GAAI,mBAA3B,OACA,cAAC,IAAD,UAAOoF,QAGTD,GACA,eAAC,IAAD,CAAMK,eAAe,gBAArB,UACE,cAAC,IAAD,qCACD,cAAC,IAAD,UAAOH,OAIV,cAAC,IAAD,CAAMG,eAAe,aAArB,SACE,cAAC,IAAD,CAAME,UAAQ,EAACD,KAAMP,EAAgBd,MAAM,EAA3C,SACGpE,EAAgB,IAAK,2B,sNCrEhC,IAAM8D,EAAU5G,YAAOyI,IAAPzI,CAAH,KAMP0I,EAAgB1I,YAAO2I,IAAP3I,CAAH,KA4BJ4I,EAxBuC,SAAC,GAOhD,IANLR,EAMI,EANJA,QACAS,EAKI,EALJA,WAEAC,GAGI,EAJJC,KAII,EAHJD,WACAE,EAEI,EAFJA,YACAC,EACI,EADJA,WAEA,OACE,eAAC,EAAD,CAASX,eAAe,gBAAgBY,WAAW,SAASC,GAAG,OAA/D,UACE,cAAC,IAAD,CAAOC,IAAG,wBAAmBN,EAAnB,QAAoCO,IAAKL,EAAaM,MAAO,GAAIC,OAAQ,KACnF,eAAC,IAAD,CAAMC,cAAc,SAASN,WAAW,WAAxC,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SAAmBf,IACnB,eAAC,IAAD,CAAME,eAAe,SAArB,UACkB,IAAfW,EAAmB,cAAC,IAAD,IAAe,KAGnC,cAACP,EAAD,CAAepD,QAAQ,YAAvB,SAAoCuD,c,gGCuC/BY,EAhEmC,SAAC,GAAqE,IAAnE/G,EAAkE,EAAlEA,IAAKgH,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,UAAkD,IAAvC1D,iBAAuC,MAA3B,GAA2B,MAAtBpD,oBAAsB,MAAP,EAAO,IAC/F+G,mBAAS,IADsF,mBAC9GC,EAD8G,KACzGC,EADyG,OAEnFF,oBAAS,GAF0E,mBAE9GG,EAF8G,KAEnGC,EAFmG,KAG/GlH,EAAkBC,cAClBkH,EAAcC,mBAAQ,WAC1B,IAAIC,EAQJ,OANEA,EADgB,SAAdlE,GAAsC,SAAdA,EACf,EACa,SAAdA,EACC,EAEA,GAENmE,YAAsB1H,EAAKyH,KACjC,CAACzH,EAAKuD,IAEHoE,EAAepG,uBACnB,SAACqG,GACCR,EAAOQ,EAAEC,cAAcpI,SAEzB,CAAC2H,IAGGU,EAAkBvG,uBAAY,WAClC6F,EAAOW,OAAOR,GAAaS,QAAQ,MAClC,CAACT,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOa,MAAK,UAAK7H,EAAgB,IAAK,WAA1B,YAAwCmD,EAAxC,WAA4D0D,UAAWA,EAAnF,UACE,cAAClH,EAAA,EAAD,CACEN,MAAO0H,EACPjH,YAAa4H,EACbxI,SAAUqI,EACV3H,IAAKuH,EACLtH,OAAQsD,EACRpD,aAAcA,IAEhB,eAAC/B,EAAA,EAAD,WACE,cAAC,IAAD,CAAQwE,QAAQ,YAAYrC,QAAS0G,EAArC,SACG7G,EAAgB,IAAK,YAExB,cAAC,IAAD,CACE8H,SAAUb,EACV9G,QAAO,sBAAE,4BAAAkB,EAAA,6DAEP0G,EAAS,IAAI3H,IAAU2G,GACL,SAAd5D,GAAsC,SAAdA,EAC1B4E,EAASC,YAAaD,EAAQ,IACP,SAAd5E,IACT4E,EAASC,YAAaD,EAAQ,KAEhCb,GAAa,GARN,SASDN,EAAUmB,EAAOzH,YAThB,OAUP4G,GAAa,GACbL,IAXO,2CAFX,SAgBGI,EAAYjH,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCI5EiI,EA9DqC,SAAC,GAAmD,IAKlGZ,EALiDT,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWjH,EAA0B,EAA1BA,IAA0B,IAArBuD,iBAAqB,MAAT,GAAS,IAC/E2D,mBAAS,IADsE,mBAC9FC,EAD8F,KACzFC,EADyF,OAEnEF,oBAAS,GAF0D,mBAE9FG,EAF8F,KAEnFC,EAFmF,KAG/FlH,EAAkBC,cAKtBoH,EADgB,SAAdlE,GAAsC,SAAdA,EACf,EACY,SAAdA,EACE,EAEA,GAIb,IAAMgE,EAAcC,mBAAQ,WAC1B,OAAOE,YAAsB1H,EAAIyH,KAChC,CAACzH,EAAIyH,IAIFE,EAAepG,uBACnB,SAACqG,GACCR,EAAOQ,EAAEC,cAAcpI,SAEzB,CAAC2H,IAGGU,EAAkBvG,uBAAY,WAClC6F,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOa,MAAK,mBAAc1E,GAAa0D,UAAWA,EAAlD,UACE,cAAClH,EAAA,EAAD,CACEG,YAAa4H,EACbxI,SAAUqI,EACVlI,MAAO0H,EACPnH,IAAKuH,EACLtH,OAAQsD,IAEV,eAACnF,EAAA,EAAD,WACE,cAAC,IAAD,CAAQwE,QAAQ,YAAYrC,QAAS0G,EAArC,SACG7G,EAAgB,IAAK,YAExB,cAAC,IAAD,CACE8H,SAAUb,EACV9G,QAAO,sBAAE,sBAAAkB,EAAA,6DACP6F,GAAa,GADN,SAEDN,EAAUG,GAFT,OAGPG,GAAa,GACbL,IAJO,2CAFX,SASGI,EAAYjH,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oB,gRClD3F,IAAMkI,GAAoBhL,IAAOC,IAAV,KAkERgL,IA3DGjL,IAAOC,IAAV,KAOqC,SAAC,GAAgF,IAA9EiL,EAA6E,EAA7EA,cAAeC,EAA8D,EAA9DA,aAAclF,EAAgD,EAAhDA,UAAWtB,EAAqC,EAArCA,IAAK9B,EAAgC,EAAhCA,aAE1F4B,GAF0H,EAAlB2G,aACxFrI,cACJ2B,YAASC,GAArBF,SACAsB,EAAcC,YAAWrB,EAAIsB,GAA7BF,UAIFsF,EAAmBC,YAAiBJ,EAAe,GAEzDpG,QAAQyG,IAAI,mBAAmBL,EAAc9H,YAC7C,IAAMoI,EAAiBH,EAAiBrI,iBAV0F,EAYvGyI,YAAS,cAAC,EAAD,CAAc/I,IAAKyI,EAAczB,UAAWjF,EAASwB,UAAWA,EAAWpD,aAAcA,KAAtH6I,EAZ2H,sBAatGD,YAC1B,cAAC,EAAD,CAAe/I,IAAKwI,EAAexB,UAAW3D,EAAWE,UAAWA,KAD/D0F,EAb2H,oBAyClI,OACE,eAAC,IAAD,CAAMrD,eAAe,gBAAgBY,WAAW,SAAhD,UACE,cAAC,IAAD,CAAMM,cAAc,SAApB,SACE,cAAC,IAAD,CAASvC,MAA4B,IAArBoE,EAAyB,eAAiB,OAA1D,SAAmEG,MAb/D,eAACR,GAAD,WACR,cAAC,IAAD,CAAY1F,QAAQ,WAAWrC,QAAS0I,EAAmBC,GAAG,MAA9D,SACE,cAAC,IAAD,CAAW3E,MAAM,cAEnB,cAAC,IAAD,CAAY3B,QAAQ,WAAWrC,QAASyI,EAAxC,SACE,cAAC,IAAD,CAASzE,MAAM,sB,2LCxDrB,IAAM4E,GAAqB7L,IAAOC,IAAV,MAkDT6L,GA3CuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUpH,EAAU,EAAVA,IAC3D7B,EAAkBC,cADmD,EAEzC6G,oBAAS,GAFgC,mBAEpEG,EAFoE,KAEzDC,EAFyD,KAGnE3D,EAAaF,aAAWxB,GAAxB0B,SAGF2F,GAFctH,YAASC,GAArBF,QAEmB6G,YAAiBS,IACtCP,EAAiBQ,EAAmBhJ,iBAE1C,OACE,eAAC,IAAD,CAAMmG,GAAG,MAAMb,eAAe,gBAAgBY,WAAW,SAAzD,UACE,cAAC,IAAD,CAASjC,MAA8B,IAAvB+E,EAA2B,eAAiB,OAA5D,SAAqER,IACrE,cAACK,GAAD,UAgBE,cAAC,IAAD,CACEjB,SAAiC,IAAvBoB,GAA4BjC,EACtC9G,QAAO,sBAAE,sBAAAkB,EAAA,6DACP6F,GAAa,GADN,SAED3D,IAFC,OAGP2D,GAAa,GAHN,2CAFX,SAQGlH,EAAgB,IAAK,mB,+FC3ChC,IAAMmJ,GAASjM,IAAOC,IAAV,MAiGGiM,GApFqC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUzI,EAAc,EAAdA,QAC/Db,EAAkBC,cAD2D,EAEjC6G,oBAAS,GAFwB,mBAEzDyC,GAFyD,aAGXC,YAAeH,EAAKxH,KAApFA,EAH2E,EAG3EA,IAAK4H,EAHsE,EAGtEA,YAAahF,EAHyD,EAGzDA,eAAgBQ,EAHyC,EAGzCA,YAAalF,EAH4B,EAG5BA,aAH4B,EAItB2J,YAAY7H,GAAjE8H,EAJ2E,EAI3EA,UAAWtB,EAJgE,EAIhEA,aAAcD,EAJkD,EAIlDA,cAAea,EAJmC,EAInCA,SAC1CW,EAAYH,EAAY9E,KACxBkF,EAAepF,EAAeE,KAC9BmF,EAAST,EAAKU,SAASC,cACVnJ,GAAW8I,GAAaA,EAAUM,cAAc,GAGnEC,qBAAU,WACRlI,QAAQyG,IAAI,gBAAgBL,EAAc+B,cAC1C,CAAC/B,IACH,IAAMgC,EAAahD,mBAAQ,WACzB,OAAInC,EACKoF,YAAYf,EAAsBO,GAEpCQ,YAAYf,EAAsBM,KACxC,CAACN,EAAUM,EAAWC,EAAc5E,IAE/BqF,EAAcC,YAAWH,GAAzBE,UAEcnJ,sBAAW,sBAAC,sBAAAE,EAAA,sEAE9BkI,GAAqB,GAFS,SAGxBe,IAHwB,OAI9Bf,GAAqB,GAJS,gDAM9BvH,QAAQwI,MAAR,MAN8B,yDAQ/B,CAACF,IA4BJ,OACE,eAACnB,GAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM/E,MAAI,EAACqG,cAAc,YAAYtG,MAAM,YAAYuG,SAAS,OAAOC,GAAG,MAA1E,mBAIA,cAAC,IAAD,CAAMvG,MAAI,EAACqG,cAAc,YAAYtG,MAAM,aAAauG,SAAS,OAAjE,SACG1K,EAAgB,IAAK,eAG1B,cAAC,GAAD,CAAeiJ,SAAUA,EAAUpH,IAAKA,IACxC,eAAC,IAAD,WACE,cAAC,IAAD,CAAMuC,MAAI,EAACqG,cAAc,YAAYtG,MAAM,YAAYuG,SAAS,OAAOC,GAAG,MAA1E,SACGb,IAEH,cAAC,IAAD,CAAM1F,MAAI,EAACqG,cAAc,YAAYtG,MAAM,aAAauG,SAAS,OAAjE,SACG1K,EAAgB,IAAK,eAGxBa,EA1CI,cAAC,GAAD,CACJuH,cAAeA,EACfC,aAAcA,EACdlF,UAAW2G,EACXjI,IAAKA,EACL9B,aAAcA,IAqCJ,cAAC6K,EAAA,EAAD,CAAcC,GAAG,MAAMC,WAAS,QCxGrCC,GAAwC,SAAC,GAA0C,IAF1EC,EAEkCC,EAAuC,EAAvCA,aAIhDC,EAJuF,EAAzBC,QAIrC,IACzBC,EAAsBH,EAHJ,IAKlBI,EAAY,IAP2E,EAAhBC,UAUvEC,EAAcF,EAAS,SAAI,EAAIH,EARb,QAQmEE,GAI3F,OAhBoBJ,EAeGO,EAAcF,EAfNG,KAAKC,MAAe,IAATT,GAAgB,KAmB/CU,GAAc,SAAC,GAE1B,OAF+D,EAAnCC,aAAmC,EAArBC,eACW,KACnChE,QAAQ,I,8ZCF5B,IAAMiE,GAAO3O,IAAOC,IAAV,MAOJ2O,GAAW5O,IAAOC,IAAV,MAIR4O,GAAc7O,YAAO8O,IAAP9O,CAAH,MA0GF+O,GArG+C,SAAC,GAQxD,IAPLpF,EAOI,EAPJA,UACAvB,EAMI,EANJA,QACAf,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACA6G,EAEI,EAFJA,UACAY,EACI,EADJA,IAEMlM,EAAkBC,cAClBsF,EAAwBjB,EAAyB,CAAEC,qBAAoBC,mBAAkBC,mBACzF0G,EAAUe,EAAI7L,MAAM,IAAID,IAAU,MAAM+J,WACxCgC,EAAgC,IAAOb,EAAUnB,WAEjDiC,EAA0BrB,GAAsC,CAAEE,aAAc,EAAGE,UAASG,cAC5Fe,EAA0BtB,GAAsC,CAAEE,aAAc,EAAGE,UAASG,cAC5FgB,EAA2BvB,GAAsC,CAAEE,aAAc,GAAIE,UAASG,cAC9FiB,EAA4BxB,GAAsC,CAAEE,aAAc,IAAKE,UAASG,cAEtG,OACE,eAAC,IAAD,CAAOzD,MAAM,MAAMhB,UAAWA,EAA9B,UACE,eAACgF,GAAD,WACE,cAACC,GAAD,UACE,cAAC,IAAD,CAAMpB,SAAS,OAAOtG,MAAI,EAACD,MAAM,aAAasG,cAAc,YAAYpE,GAAG,OAA3E,SACGrG,EAAgB,IAAK,iBAG1B,cAAC8L,GAAD,UACE,cAAC,IAAD,CAAMpB,SAAS,OAAOtG,MAAI,EAACD,MAAM,aAAasG,cAAc,YAAYpE,GAAG,OAA3E,SACGrG,EAAgB,IAAK,WAG1B,cAAC8L,GAAD,UACE,cAAC,IAAD,CAAMpB,SAAS,OAAOtG,MAAI,EAACD,MAAM,aAAasG,cAAc,YAAYpE,GAAG,OAA3E,SACGrG,EAAgB,IAAK,uBAI1B,cAAC8L,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAcS,EAAyBR,eAAgBO,IADxE,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOM,MAGT,cAACN,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAcU,EAAyBT,eAAgBO,IADxE,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOO,MAGT,cAACP,GAAD,UACE,cAAC,IAAD,oBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAcW,EAA0BV,eAAgBO,IADzE,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOQ,MAGT,cAACR,GAAD,UACE,cAAC,IAAD,0BAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGJ,GAAY,CAAEC,aAAcY,EAA2BX,eAAgBO,IAD1E,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOS,SAGX,cAACR,GAAD,CAAarB,SAAS,OAAOvG,MAAM,aAAnC,SACGnE,EACC,IACA,sKAGJ,cAAC,IAAD,CAAMwF,eAAe,SAArB,SACE,eAAC,IAAD,CAAcC,KAAI,qDAAgDF,GAAlE,UACGvF,EAAgB,IAAK,OADxB,IACiCsF,WCxF1BkH,GA1B6B,SAAC,GAOtC,IANLlH,EAMI,EANJA,QACAf,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACA6G,EAEI,EAFJA,UACAY,EACI,EADJA,IACI,EACwBvD,YAC1B,cAAC,GAAD,CACErD,QAASA,EACTf,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChB6G,UAAWA,EACXY,IAAKA,KAPFO,EADH,oBAYJ,OACE,cAAC,IAAD,CAAYtM,QAASsM,EAAmBjK,QAAQ,OAAOnF,KAAK,KAAKqP,GAAG,MAApE,SACE,cAAC,IAAD,O,mgDCjBN,IAAMC,GAAeC,YAAH,MAYZC,GAAmB3P,IAAOC,IAAV,KAgBPwP,IAWTG,GAAQ5P,IAAOC,IAAV,MAEK,SAACC,GAAD,OAAWA,EAAMQ,MAAMmP,KAAKC,cAWtCC,GAAU/P,IAAOC,IAAV,MACS,qBAAGS,MAAkBC,OAAOqP,eAM5CC,GAAmBjQ,IAAOC,IAAV,MACV,SAACC,GAAD,OAAYA,EAAM4G,SAAW,OAAS,SAwInCoJ,GA1H2B,SAAC,GAAwE,IAAtE/D,EAAqE,EAArEA,KAAMlE,EAA+D,EAA/DA,QAASmG,EAAsD,EAAtDA,UAAW+B,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,SAAShE,EAAwB,EAAxBA,SAAUzI,EAAc,EAAdA,QAC5Fb,EAAkBC,cADwF,EAGtD6G,oBAAS,GAH6C,mBAGzGyG,EAHyG,KAGlFC,EAHkF,KAS1GxH,EAAYqD,EAAKpE,YACnBoE,EAAKnD,YAAYuH,cADH,UAEXpE,EAAKnD,YAAYuH,cAFN,YAEuBpE,EAAK7E,iBAAiBiJ,eAEzDC,EAAwBtG,mBAAQ,WACpC,OAAKiC,EAAKsE,oBAGNtE,EAAK7E,mBAAqBoJ,IAAWC,IAChCR,EAAShN,MAAMgJ,EAAKsE,qBAEzBtE,EAAK7E,mBAAqBoJ,IAAWE,KAChCxC,EAAUjL,MAAMgJ,EAAKsE,qBAG1BtE,EAAK7E,mBAAqBoJ,IAAWG,KAEhCT,EAASjN,MAAMgJ,EAAKsE,qBAEtBtE,EAAKsE,oBAbH,OAcR,CAACN,EAASC,EAAUhC,EAAWjC,EAAKsE,oBAAqBtE,EAAK7E,mBAE3Da,EAAyBgE,EAAK2E,aAAL,UACxBrG,OAAO0B,EAAK2E,cAAc9N,oBAAe+N,EAAW,CAAEC,sBAAuB,KAChF,IAEEC,EAAsBT,EAAU,WAC9B/F,OAAO+F,GAAYxN,oBAAe+N,EAAW,CAAEC,sBAAuB,KAC1E,IAIE5I,EAAU+D,EAAKU,SAEfqE,EACJ/E,EAAK6C,KACL7C,EAAK6C,IAAI7L,MAAM,IAAID,IAAU,MAAM+J,WAAWjK,oBAAe+N,EAAW,CACtEI,sBAAuB,EACvBH,sBAAuB,IAGnB3J,EAA+D8E,EAA/D9E,mBAAoBC,EAA2C6E,EAA3C7E,iBAAkBC,EAAyB4E,EAAzB5E,eAAgBwB,EAASoD,EAATpD,KAE9D,OACE,eAAC6G,GAAD,WACwB,UAArBzD,EAAKnD,aAA2B,cAAC2G,GAAD,IACjC,cAAC,EAAD,CACEvH,QAASA,EACTS,WAAYsD,EAAKtD,WACjBE,KAAMA,EACNE,WAAYkD,EAAKtJ,aACjBiG,UAAWA,EACXE,YAAamD,EAAKnD,eAElBf,GACA,eAAC,IAAD,CAAMK,eAAe,gBAAgBY,WAAW,SAAhD,UACE,eAAC,IAAD,WAAOpG,EAAgB,IAAK,OAA5B,OACA,cAAC,IAAD,CAAMoE,MAAI,EAACkK,MAAO,CAAEC,QAAS,OAAQnI,WAAY,UAAjD,SACGiD,EAAK6C,IACJ,qCACE,cAAC,GAAD,CACE5G,QAASA,EACTf,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChB6G,UAAWA,EACXY,IAAK7C,EAAK6C,MAEXkC,EATH,OAYA,cAAC,IAAD,CAAU3H,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMhB,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOxF,EAAgB,IAAK,QAA5B,OACA,cAAC,IAAD,CAAMoE,MAAI,EAAV,SA7CY,aA+Cd,eAAC,IAAD,CAAMoB,eAAe,gBAArB,UACE,eAAC,IAAD,CAAM8I,MAAO,CAAE5D,SAAU,QAAzB,UAAoC1K,EAAgB,MAAO,eAA3D,OACA,eAAC,IAAD,CAAMoE,MAAI,EAACkK,MAAO,CAAE5D,SAAU,QAA9B,UACGrB,EAAKtJ,aAAe,IADvB,UAIF,cAACyO,GAAD,CAAsBnF,KAAMA,EAAMC,SAAUA,EAAUzI,QAASA,IAC/D,cAACoM,GAAD,IACA,cAAC,EAAD,CACE9M,QAAS,kBAAMqN,GAA0BD,IACzCvJ,SAAUuJ,IAEZ,cAACJ,GAAD,CAAkBnJ,SAAUuJ,EAA5B,SACE,cAAC,EAAD,CACEpI,QAASA,EACTF,YAAaoE,EAAKpE,YAClBC,eACEmE,EAAKpE,YAAL,wCACqCoE,EAAK5E,eAAeE,MADzD,wCAEqC0E,EAAKI,YAAY9E,MAExDS,mBAAoB+I,EACpB9I,uBAAyBA,EACzBC,QAASA,EACTf,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,U,6XC1M1B,IAsBegK,GAtBQ,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EAC/BC,cAAjBC,EADgD,EAChDA,IAAKC,EAD2C,EAC3CA,QACP9O,EAAkBC,cAExB,OACE,eAAC,GAAD,WACE,eAAC8O,GAAD,WACE,cAAC,IAAD,CAAQC,QAASN,EAAYxP,SAAU,kBAAMyP,GAAeD,MAC5D,eAAC,IAAD,eAAQ1O,EAAgB,IAAK,qBAE/B,eAAC,IAAD,CAAYiP,YAAaH,EAAU,EAAI,EAAGzR,KAAK,KAAKmF,QAAQ,SAA5D,UACE,cAAC,IAAD,CAAgB0M,GAAIC,KAAMC,GAAE,UAAKP,GAAjC,SACG7O,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAgBkP,GAAIC,KAAMC,GAAE,UAAKP,EAAL,YAA5B,SACG7O,EAAgB,IAAK,qBAS1B8D,GAAU5G,IAAOC,IAAV,MAOP4R,GAAgB7R,IAAOC,IAAV,KAMf6O,K,2JCzCW9O,WAAOC,IAAtB,MACsB,qBAAGS,MAAkBC,OAAOwR,cCkInCC,GA9GqB,SAACC,GAAgB,IAC3CC,EAASZ,cAATY,KACFxP,EAAkBC,cAClBwP,EAAUC,cACVpE,EAAYqE,cAEZtC,EAAYuC,cANgC,EAQqBhP,cAA/DC,EAR0C,EAQ1CA,QAASyI,EARiC,EAQjCA,SACTuG,EAAcN,EAAdM,UAEFnP,EAAWC,cACTmP,EAAgBC,cAAhBD,YACR5F,qBAAU,WACJrJ,GACFH,EAASqB,YAAuBlB,MAEjC,CAACA,EAASH,EAAUoP,IAjB2B,MAmBdhJ,oBAAS,GAnBK,mBAmB3C4H,EAnB2C,KAmB/BC,EAnB+B,KAqB5CqB,EAAcP,EAAQQ,QAAO,SAAC5G,GAAD,QAAYA,EAAKpE,gBAAkB4K,GAAiC,OAApBxG,EAAKtD,cAClFmK,EAAgBT,EAAQQ,QAAO,SAAC5G,GAAD,QAAYA,EAAKpE,gBAAkB4K,GAAiC,OAApBxG,EAAKtD,cAEpFoK,EAAkBH,EAAYC,QAClC,SAAC5G,GAAD,OAAUA,EAAK+G,UAAY,IAAIhQ,IAAUiJ,EAAK+G,SAAShI,eAAe6B,cAAc,MAMhFoG,EAAYlP,uBAChB,SAACmP,EAAgBnL,GAoCf,OAlCqDmL,EAAe/R,KAAI,SAAC8K,GAMvErH,QAAQyG,IAAI,aAAaY,GACzB,IAKMkH,EALqB,IAAInQ,IAAUiJ,EAAKmH,eAAiB,GAC5DnQ,MAAM,IAAID,IAAUiJ,EAAKoH,aACzBtT,IAAI,IAAIiD,IAAU,IAAIsQ,IAAI,KAGgBrQ,MAAMgC,KAC/C6J,EAAMZ,EAAUjL,MAAMkQ,GAEtB7C,EAAa,IAAItN,IAAUiJ,EAAKsE,qBAAuB,GAiB3D,OAfItE,EAAK7E,mBAAqBoJ,IAAWC,MACvCH,EAAaA,EAAWrN,MAAMgN,IAU5BK,EAAWiD,WAAW,GAAK,IAC5BzE,EAAMA,EAAI/O,IAAIuQ,IAGV,2BAAKrE,GAAZ,IAAkB6C,WAES3N,KAAI,SAAC8K,GAAD,OAC/B,cAAC,GAAD,CAEEA,KAAMA,EACNlE,QAASA,EACTkI,SAAUA,EACV/B,UAAWA,EACXhC,SAAUA,EACVzI,QAASA,GANJwI,EAAKxH,UAUhB,CAACwL,EAAUxM,EAASyK,EAAWhC,IAGjC,OACE,eAACsH,EAAA,EAAD,WACE,cAAC,IAAD,CAAS1B,GAAG,KAAK7R,KAAK,KAAK8G,MAAM,UAAUkC,GAAG,OAAOiI,MAAO,CAAEuC,UAAW,UAAzE,SACGhB,EACG7P,EAAgB,MAAO,4BACvBA,EAAgB,IAAK,iCAE3B,cAAC,IAAD,CAASkP,GAAG,KAAK/K,MAAM,YAAYkC,GAAG,OAAOiI,MAAO,CAAEuC,UAAW,UAAjE,SACG7Q,EAAgB,IAAO,6CAE1B,cAAC,GAAD,CAAgB0O,WAAYA,EAAYC,cAAeA,IACvD,gCACE,cAAC,GAAD,IACA,eAAChJ,EAAA,EAAD,WACE,cAAC,IAAD,CAAOmL,OAAK,EAACtB,KAAI,UAAKA,GAAtB,SACgBa,EAAb3B,EAAuByB,EAAoCH,GAAnB,KAE3C,cAAC,IAAD,CAAOc,OAAK,EAACtB,KAAI,UAAKA,EAAL,YAAjB,SACGa,EAAUH,GAAe,WAIhC,cAAC,IAAD,CAAO5J,IAAI,oBAAoBC,IAAI,eAAeC,MAAO,KAAMC,OAAQ,IAAKsK,YAAU","file":"static/js/9.79eed452.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@lukkasromero/cswap-uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(15012000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@lukkasromero/cswap-uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number,tokenName:string) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n\n\n\n\n  \n\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account,tokenName)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid,tokenName],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      // if (sousId === 0) {\n      //   const txHash = await unstake(masterChefContract, 0, amount, account)\n      //   console.info(txHash)\n      // } else if (isOldSyrup) {\n      //   const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n      //   console.info(txHash)\n      // } else {\n      //   const txHash = await sousUnstake(sousChefContract, amount, account)\n      //   console.info(txHash)\n      // }\n      // dispatch(updateUserStakedBalance(sousId, account))\n      // dispatch(updateUserBalance(sousId, account))\n      // dispatch(updateUserPendingReward(sousId, account))\n    },\n    [],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@lukkasromero/cswap-uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@lukkasromero/cswap-uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { farmsConfig } from 'config/constants'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  totalBTCValueFormatted?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  totalBTCValueFormatted,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://quickswap.exchange/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://quickswap.exchange/#/add/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>Total Liquidity (BTC):</Text>\n         <Text>{totalBTCValueFormatted}</Text>\n        </Flex>\n      )}\n\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@lukkasromero/cswap-uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@lukkasromero/cswap-uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance, fixForValues } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    let decimals\n    if (tokenName === 'USDT' || tokenName === 'USDC') {\n      decimals = 6\n    } else if  (tokenName === 'WBTC') {\n      decimals = 8 \n    }  else {\n      decimals = 18\n    }\n    return getFullDisplayBalance(max, decimals)\n  }, [max, tokenName])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(Number(fullBalance).toFixed(2))\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            let newval:BigNumber\n            newval = new BigNumber(val)\n            if (tokenName === 'USDT' || tokenName === 'USDC') { \n              newval = fixForValues(newval, 12)\n            } else if (tokenName === 'WBTC') {\n              newval = fixForValues(newval, 10)\n            }\n            setPendingTx(true)\n            await onConfirm(newval.toString())\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@lukkasromero/cswap-uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n\n  let decimals\n\n  if (tokenName === 'USDT' || tokenName === 'USDC') {\n    decimals = 6\n  } else if (tokenName === 'WBTC') {\n    decimals = 8\n  } else {\n    decimals = 18\n  }\n\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max,decimals)\n  }, [max,decimals])\n\n\n  \n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@lukkasromero/cswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n  lpTokenPrice?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst TextStyle = styled.div`\n  font-size: 13px;\n  font-weight: 200;\n  margin-top: 8px;\n  color: #333333;\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP, lpTokenPrice}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid,tokenName)\n\n \n\n  const rawStakedBalance = getBalanceNumber(stakedBalance, 6)\n\n  console.log(\"rawStakedBalance\",stakedBalance.toString())\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    // return rawStakedBalance === 0 ? (\n    //   <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    // ) : (\n    //   <IconButtonWrapper>\n    //     <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n    //       <MinusIcon color=\"primary\" />\n    //     </IconButton>\n    //     <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n    //       <AddIcon color=\"primary\" />\n    //     </IconButton>\n    //   </IconButtonWrapper>\n    // )\n\n    return  <IconButtonWrapper>\n    <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n      <MinusIcon color=\"primary\" />\n    </IconButton>\n    <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n      <AddIcon color=\"primary\" />\n    </IconButton>\n  </IconButtonWrapper>\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {/* { rawStakedBalance > 0 ? <TextStyle>~${(lpTokenPrice * rawStakedBalance).toFixed(2)}</TextStyle> : '' } */}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@lukkasromero/cswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {/* {pid === 9 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null} */}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState,useEffect, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@lukkasromero/cswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n\n  useEffect(()=>{\n    console.log(\"stakedBalance\",stakedBalance.toNumber())\n  },[stakedBalance])\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n\n\n  \n    return  <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    // return isApproved ? (\n    //   <StakeAction\n    //     stakedBalance={stakedBalance}\n    //     tokenBalance={tokenBalance}\n    //     tokenName={lpName}\n    //     pid={pid}\n    //     depositFeeBP={depositFeeBP}\n    //   />\n    // ) : (\n    //   <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n    //     {TranslateString(999, 'Approve Contract')}\n    //   </Button>\n    // )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          CSWAP\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@lukkasromero/cswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'CSWAP per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@lukkasromero/cswap-uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@lukkasromero/cswap-uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  btcPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, btcPrice,ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n\n    if (farm.quoteTokenSymbol === QuoteToken.WBTC) {\n      \n      return btcPrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice,btcPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalBTCValueFormatted = farm.lpTotalInBTC\n    ? `${Number(farm.lpTotalInBTC).toLocaleString(undefined, { maximumFractionDigits: 8 })}`\n    : '-'\n\n  const totalValueFormatted = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  \n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'CSWAP'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'CSWAP' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://polygonscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://polygonscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormatted}\n          totalBTCValueFormatted ={totalBTCValueFormatted}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@lukkasromero/cswap-uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@lukkasromero/cswap-uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  \n  const bnbPrice  = usePriceBnbBusd()\n\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n\n\n        console.log(\"farmsList1\",farm)\n        const cakeRewardPerBlock = new BigNumber(farm.cswapPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n\n\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n\n        // if (farm.quoteTokenSymbol === QuoteToken.WBTC) {\n\n        //   totalValue = btcPrice.times(totalValue)\n        // }\n\n\n        if (totalValue.comparedTo(0) > 0) {\n           apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {tokenMode\n          ? TranslateString(10002, 'Stake tokens to earn EGG')\n          : TranslateString(320, 'Stake LP tokens to earn EGG')}\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}