{"version":3,"sources":["views/Home/components/CardValue.tsx","hooks/useTokenBalance.ts","hooks/useHarvest.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/ReferralCard.tsx","views/Home/components/AuditCard.tsx","views/Home/Home.tsx"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","useMaticBalance","useWallet","balance","account","useState","BigNumber","maticBalance","setMaticBalance","fastRefresh","useRefresh","a","fetchBalance","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","balanceOf","bal","useTokenBalance","ethereum","getTokenBalance","res","useHarvest","farmPid","dispatch","useDispatch","masterChefContract","useMasterchef","onReward","useCallback","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract","useSousChef","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","updateUserBalance","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","earning","pow","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","CSWAPPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","console","log","StyledTwitterCard","StyleNumber","Heading","endCountDownRenderer","days","hours","minutes","seconds","completed","as","TwitterCard","date","renderer","ReferralCard","yourReferree","setYourReferree","yourEarnings","setYourEarnings","yourTotalReferrals","setYourTotalReferrals","myRefLink","setMyRefLink","referralContract","useReferralContract","loadData","getReferrer","_myReferral","totalReferralCommissions","_myEarnings","referralsCount","_myTotalReferrals","text","alert","input","document","createElement","innerHTML","body","appendChild","select","result","execCommand","removeChild","copyRefLink","marginTop","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","FarmStakingCard","AuditCard"],"mappings":"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","file":"static/js/12.fc1f0717.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@lukkasromero/cswap-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\n\nexport const useMaticBalance = () => {\n  const {balance,account }: { balance: string, account: string} = useWallet()\n\n  const [maticBalance, setMaticBalance] = useState(new BigNumber(0))\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      setMaticBalance(new BigNumber(balance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, balance, fastRefresh])\n\n  return maticBalance\n\n}\n\n\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCSWAP',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport { Text } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCSWAP',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport { useAllHarvest } from 'hooks/useHarvest'\n// eslint-disable-next-line import/no-unresolved\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\n// eslint-disable-next-line import/no-unresolved\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'My assets')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'CSWAP to harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'CSWAP in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Collect all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@lukkasromero/cswap-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n\n  let CSWAPPerBlock = 0\n  if (farms && farms[0] && farms[0].CSWAPPerBlock) {\n    CSWAPPerBlock = new BigNumber(farms[0].CSWAPPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Egg Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {CSWAPPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@lukkasromero/cswap-uikit'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  const tvl = totalValue.toFixed(2);\n\n\n  useEffect(()=>{\n\n    console.log(\"totalValue\",totalValue.toNumber())\n  },[totalValue])\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          Total Value Locked\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@lukkasromero/cswap-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport Countdown from 'react-countdown'\nimport CountdownCard from 'views/Presale/components/CountdownCard'\n// eslint-disable-next-line import/no-unresolved\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\nconst StyleNumber = styled(Heading)`\n  font-size: 22px;\n  margin-bottom: 36px;\n`\n\n\n\nconst endCountDownRenderer = ({ days, hours, minutes, seconds, completed }) => {\n  return (\n    <>\n      <StyleNumber as=\"h3\" size=\"MD\">\n        {days > 0?`${days} Days:`:\"\"}  {hours} Hours : {minutes} Minutes : {seconds} Seconds\n      </StyleNumber>\n    </>\n  )\n}\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {/* {TranslateString(10003, 'Newsletter')} */}\n          Farms starting in\n        </Heading>\n        {/* <Timeline\n\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'Cryptoswap8',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        /> */}\n\n<Countdown date={1628198344000} renderer={endCountDownRenderer} />\n\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React,{useCallback, useEffect,useState} from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, Heading, Skeleton, Text } from '@lukkasromero/cswap-uikit'\nimport {useReferralContract} from 'hooks/useContract'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  justify-content:space-between;\n`\n\nconst ReferralCard = () => {\n\n  const { account } = useWallet()\n\n  const [yourReferree,setYourReferree] = useState(\"-\")\n  const [yourEarnings,setYourEarnings] = useState(0)\n  const [yourTotalReferrals,setYourTotalReferrals] = useState(0)\n  const [myRefLink,setMyRefLink] = useState(\"hii\")\n\n\n  const referralContract = useReferralContract();\n\n\n \n\n\n\n  const loadData = useCallback(async() => {\n    if(referralContract && account){\n      let _myReferral = await referralContract.methods.getReferrer(account).call();\n      const _myEarnings = await referralContract.methods.totalReferralCommissions(account).call();\n      const _myTotalReferrals = await referralContract.methods.referralsCount(account).call();\n      if(_myReferral === \"0x0000000000000000000000000000000000000000\"){\n        _myReferral = \"-\"\n      }\n      setYourReferree(_myReferral)\n      setYourEarnings(_myEarnings/1e18)\n      setYourTotalReferrals(_myTotalReferrals)\n\n      setMyRefLink(`https://cswap.app?ref=${account}`)\n    }\n  \n\n  }, [referralContract,account]) \n\n\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n \n  const  copyRefLink=(text:any) =>{\n\n    if(!account){\n      alert(\"Please Connect Your Wallet First\")\n      return null\n    }\n    const input = document.createElement('textarea');\n    input.innerHTML = text;\n    document.body.appendChild(input);\n    input.select();\n    const result = document.execCommand('copy');\n    document.body.removeChild(input);\n    alert(\"Referral Link copied\")\n    return result;\n}\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          Referral Details\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <Text color=\"textSubtle\">Total Referral Earnings</Text>\n\n          <CardValue value={yourEarnings} prefix=\"CSWAP \" decimals={2} />\n\n          <Text color=\"textSubtle\">Total Referrals</Text>\n\n          <CardValue value={yourTotalReferrals} prefix=\"\" decimals={0} />\n\n          {/* </Heading> */}\n\n          <Text color=\"textSubtle\">Your Referee</Text>\n\n<Text bold fontSize=\"20px\">\n  {yourReferree}\n</Text>\n<Button onClick={()=>{\n  copyRefLink(myRefLink)\n}}>Copy Your Referral Link</Button>\n        </>\n      </CardBody>\n      {/* <CardBody>\n       \n      </CardBody> */}\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default ReferralCard\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport { useAllHarvest } from 'hooks/useHarvest'\n// eslint-disable-next-line import/no-unresolved\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\n// eslint-disable-next-line import/no-unresolved\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  // background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n      Audits & Reviews\n\n        </Heading>\n        <img  alt=\"techrate\" src=\"/images/techrate.png\"   width={250}/>\n         \n         <img  alt=\"rug doc\" src=\"/images/rugdocicon.png\"   width={250} style={{marginTop:10}}/>\n         \n     \n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@lukkasromero/cswap-uikit'\n\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport ProfitStats from './components/ProfitStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport ReferralCard from \"./components/ReferralCard\"\nimport AuditCard from \"./components/AuditCard\"\n\nconst Hero = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 32px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        {/* <img src=\"/images/Title Bar.png\" alt=\"cake logo\" width={950} height={225} /> */}\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <AuditCard />\n\n          <TwitterCard />\n          <TotalValueLockedCard />\n        \n\n        </Cards>\n\n       <Cards>\n       <ReferralCard /> \n        <CakeStats />\n\n       </Cards>\n\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}