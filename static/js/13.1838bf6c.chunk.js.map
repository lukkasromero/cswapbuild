{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useAllowance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/Home.tsx"],"names":["useMaticBalance","useWallet","balance","account","useState","BigNumber","maticBalance","setMaticBalance","fastRefresh","useRefresh","useEffect","a","fetchBalance","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","balanceOf","bal","useTokenBalance","ethereum","getTokenBalance","res","useIfoAllowance","tokenContract","spenderAddress","dependency","allowance","setAllowance","fetch","usePresaleBUSDAllowance","presaleContract","usePresale","busdContract","useBUSD","fetchAllowance","getAllowance","refreshInterval","setInterval","clearInterval","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","contractRaisingToken","useERC20","pendingTx","setPendingTx","onApprove","useIfoApprove","refundContract","useRefund","cswapBal","claimCSWAP","swapCWAP","send","from","size","mb","getBalanceNumber","fullWidth","disabled","onClick","console","error","id","Number","UnlockButton","Hero","mediaQueries","lg","Home","BaseLayout","sm","Page","FarmStakingCard"],"mappings":"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","file":"static/js/13.1838bf6c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\n\nexport const useMaticBalance = () => {\n  const {balance,account }: { balance: string, account: string} = useWallet()\n\n  const [maticBalance, setMaticBalance] = useState(new BigNumber(0))\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      setMaticBalance(new BigNumber(balance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, balance, fastRefresh])\n\n  return maticBalance\n\n}\n\n\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery,usePresale,useBUSD } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n\nexport const usePresaleBUSDAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const presaleContract = usePresale()\n  const busdContract = useBUSD()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(busdContract, presaleContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && busdContract && presaleContract) {\n      fetchAllowance()\n    }\n\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, busdContract, presaleContract])\n  return allowance\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@lukkasromero/cswap-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React, { useState, useCallback,useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport { useAllHarvest } from 'hooks/useHarvest'\n// eslint-disable-next-line import/no-unresolved\nimport {useERC20, useRefund} from 'hooks/useContract'\n// eslint-disable-next-line import/no-unresolved\nimport {  useIfoAllowance } from 'hooks/useAllowance'\nimport { useIfoApprove } from 'hooks/useApprove'\n\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  // background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const contractRaisingToken = useERC20('0x49Ac2737A92c580eD253A067E1dcbDd82bDe7682')\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const allowance = useIfoAllowance(contractRaisingToken, \"0xC1D28D92627C7D58cDE4f8B802FbD312B8c31deC\", pendingTx)\n  const onApprove = useIfoApprove(contractRaisingToken,\"0xC1D28D92627C7D58cDE4f8B802FbD312B8c31deC\")\n\n  const { account } = useWallet()\n  const refundContract = useRefund(\"0xC1D28D92627C7D58cDE4f8B802FbD312B8c31deC\");\n\n\n  const cswapBal = useTokenBalance(getCakeAddress())\n\n \n\n\n\n\n  const claimCSWAP = async ()=> {\n    setPendingTx(true)\n    try {\n      await refundContract.methods.swapCWAP(cswapBal).send({from:account})\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n\n  \n  const renderButton = ()=>{\n\n    if (allowance <= 0) {\n      return (\n        <Button\n          fullWidth\n          disabled={pendingTx}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n      )\n    }\n\n    return <Button\n    id=\"harvest-all\"\n    disabled={Number(cswapBal) === 0|| pendingTx}\n    onClick={claimCSWAP}\n    fullWidth\n  >\n    {pendingTx\n      ? \"Claiming CSWAP\"\n      : \"Claim CSWAP\"}\n  </Button>\n  }\n\n\n\n\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n        Swap your CSwap to Uniq Token \n\n        </Heading>\n        {/* <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} /> */}\n        <Block>\n          <Label>\n           {/* Please claim your CSWAP from here (if you staked CSWAP in pool)  and want to withdraw */}\n          </Label>\n\n\n\n\n          <CakeHarvestBalance earningsSum={getBalanceNumber(cswapBal)} />\n          <Label>\n           Claimable CSWAP Amount \n          </Label>\n        </Block>\n        {/* <Block>\n          <Label>{TranslateString(546, 'CSWAP in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block> */}\n        <Actions>\n          {account ? (\n            renderButton()\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@lukkasromero/cswap-uikit'\n\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport ProfitStats from './components/ProfitStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport ReferralCard from \"./components/ReferralCard\"\nimport AuditCard from \"./components/AuditCard\"\nimport FarmsStartTime from \"./components/FarmsStartTime\"\n\n\nconst Hero = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 32px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        {/* <img src=\"/images/Title Bar.png\" alt=\"cake logo\" width={950} height={225} /> */}\n      </Hero>\n      <div>\n      <FarmStakingCard />\n\n        {/* <Cards>\n        <TwitterCard />\n           <TotalValueLockedCard />\n          <FarmsStartTime/>\n        </Cards>\n\n       <Cards>\n       <ReferralCard /> \n        <CakeStats />\n\n       </Cards> */}\n\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}