{"version":3,"sources":["views/Home/components/CardValue.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/ReferralCard.tsx","views/Home/components/FarmsStartTime.tsx","views/Home/Home.tsx"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","useMaticBalance","useWallet","balance","account","useState","BigNumber","maticBalance","setMaticBalance","fastRefresh","useRefresh","a","fetchBalance","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","balanceOf","bal","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","refundContract","useRefund","refundAmount","setRefundAmount","loadRefundData","getClaimAmount","resp","console","log","claimCSWAP","send","from","size","mb","id","disabled","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","eggPrice","usePriceCakeBusd","circSupply","minus","cakeSupply","getBalanceNumber","marketCap","times","CSWAPPerBlock","pow","toNumber","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","toFixed","StyledTwitterCard","TwitterCard","Heading","dataSource","sourceType","screenName","options","height","chrome","width","ReferralCard","yourReferree","setYourReferree","yourEarnings","setYourEarnings","yourTotalReferrals","setYourTotalReferrals","myRefLink","setMyRefLink","referralContract","useReferralContract","loadData","useCallback","getReferrer","_myReferral","totalReferralCommissions","_myEarnings","referralsCount","_myTotalReferrals","text","alert","input","document","createElement","innerHTML","body","appendChild","select","result","execCommand","removeChild","copyRefLink","StyleNumber","endCountDownRenderer","days","hours","minutes","seconds","completed","as","date","renderer","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","FarmStakingCard","FarmsStartTime"],"mappings":"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","file":"static/js/14.b9ef95b0.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@lukkasromero/cswap-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\n\nexport const useMaticBalance = () => {\n  const {balance,account }: { balance: string, account: string} = useWallet()\n\n  const [maticBalance, setMaticBalance] = useState(new BigNumber(0))\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      setMaticBalance(new BigNumber(balance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, balance, fastRefresh])\n\n  return maticBalance\n\n}\n\n\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Text } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React, { useState, useCallback,useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@lukkasromero/cswap-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport { useAllHarvest } from 'hooks/useHarvest'\n// eslint-disable-next-line import/no-unresolved\nimport {useRefund} from 'hooks/useContract'\n// eslint-disable-next-line import/no-unresolved\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  // background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const refundContract = useRefund(\"0x27A65CcE0577e0D55940eE128F7686957e55A7f0\");\n\n  const [refundAmount, setRefundAmount] = useState(0);\n\n\n\n  useEffect(()=>{\n    const loadRefundData= async()=>{\n      let resp = await refundContract.methods.getClaimAmount(account).call();\n      resp /= 1e18;\n\n      console.log(\"resp\",resp)\n      setRefundAmount(resp)\n  \n    }\n\n    if(refundContract && account){\n      loadRefundData()\n    }\n  \n  },[refundContract,account])\n\n\n\n\n  const claimCSWAP = async ()=> {\n    setPendingTx(true)\n    try {\n      await refundContract.methods.claimCSWAP().send({from:account})\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n\n\n\n\n\n\n\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n        CSWAP Refund \n\n        </Heading>\n        {/* <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} /> */}\n        <Block>\n          <Label>\n           Please claim your CSWAP from here (if you staked CSWAP in pool)  and want to withdraw\n          </Label>\n\n\n\n\n          <CakeHarvestBalance earningsSum={refundAmount} />\n          <Label>\n           Claimable CSWAP Amount \n          </Label>\n        </Block>\n        {/* <Block>\n          <Label>{TranslateString(546, 'CSWAP in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block> */}\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={refundAmount === 0|| pendingTx}\n              onClick={claimCSWAP}\n              fullWidth\n            >\n              {pendingTx\n                ? \"Claiming CSWAP\"\n                : \"Claim CSWAP\"}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@lukkasromero/cswap-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n\n  let CSWAPPerBlock = 0\n  if (farms && farms[0] && farms[0].CSWAPPerBlock) {\n    CSWAPPerBlock = new BigNumber(farms[0].CSWAPPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Egg Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {CSWAPPerBlock}\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">\n            Total Supply\n            </Text>\n          <Text bold fontSize=\"14px\">\n            100000\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@lukkasromero/cswap-uikit'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  const tvl = totalValue.toFixed(2);\n\n\n  useEffect(()=>{\n\n    console.log(\"totalValue\",totalValue.toNumber())\n  },[totalValue])\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          Total Value Locked\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@lukkasromero/cswap-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport Countdown from 'react-countdown'\nimport CountdownCard from 'views/Presale/components/CountdownCard'\n// eslint-disable-next-line import/no-unresolved\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\nconst StyleNumber = styled(Heading)`\n  font-size: 22px;\n  margin-bottom: 36px;\n`\n\n\n\nconst endCountDownRenderer = ({ days, hours, minutes, seconds, completed }) => {\n  return (\n    <>\n      <StyleNumber as=\"h3\" size=\"MD\">\n        {days > 0?`${days} Days:`:\"\"}  {hours} Hours : {minutes} Minutes : {seconds} Seconds\n      </StyleNumber>\n    </>\n  )\n}\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {/* {TranslateString(10003, 'Newsletter')} */}\n          Tweets\n        </Heading>\n        <Timeline\n\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'Cryptoswap8',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n\n\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React,{useCallback, useEffect,useState} from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, Heading, Skeleton, Text } from '@lukkasromero/cswap-uikit'\nimport {useReferralContract} from 'hooks/useContract'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  justify-content:space-between;\n`\n\nconst ReferralCard = () => {\n\n  const { account } = useWallet()\n\n  const [yourReferree,setYourReferree] = useState(\"-\")\n  const [yourEarnings,setYourEarnings] = useState(0)\n  const [yourTotalReferrals,setYourTotalReferrals] = useState(0)\n  const [myRefLink,setMyRefLink] = useState(\"hii\")\n\n\n  const referralContract = useReferralContract();\n\n\n \n\n\n\n  const loadData = useCallback(async() => {\n    if(referralContract && account){\n      let _myReferral = await referralContract.methods.getReferrer(account).call();\n      const _myEarnings = await referralContract.methods.totalReferralCommissions(account).call();\n      const _myTotalReferrals = await referralContract.methods.referralsCount(account).call();\n      if(_myReferral === \"0x0000000000000000000000000000000000000000\"){\n        _myReferral = \"-\"\n      }\n      setYourReferree(_myReferral)\n      setYourEarnings(_myEarnings/1e18)\n      setYourTotalReferrals(_myTotalReferrals)\n\n      setMyRefLink(`https://cswap.app?ref=${account}`)\n    }\n  \n\n  }, [referralContract,account]) \n\n\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n \n  const  copyRefLink=(text:any) =>{\n\n    if(!account){\n      alert(\"Please Connect Your Wallet First\")\n      return null\n    }\n    const input = document.createElement('textarea');\n    input.innerHTML = text;\n    document.body.appendChild(input);\n    input.select();\n    const result = document.execCommand('copy');\n    document.body.removeChild(input);\n    alert(\"Referral Link copied\")\n    return result;\n}\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          Referral Details\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <Text color=\"textSubtle\">Total Referral Earnings</Text>\n\n          <CardValue value={yourEarnings} prefix=\"CSWAP \" decimals={2} />\n\n          <Text color=\"textSubtle\">Total Referrals</Text>\n\n          <CardValue value={yourTotalReferrals} prefix=\"\" decimals={0} />\n\n          {/* </Heading> */}\n\n          <Text color=\"textSubtle\">Your Referee</Text>\n\n<Text bold fontSize=\"20px\">\n  {yourReferree}\n</Text>\n<Button onClick={()=>{\n  copyRefLink(myRefLink)\n}}>Copy Your Referral Link</Button>\n        </>\n      </CardBody>\n      {/* <CardBody>\n       \n      </CardBody> */}\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default ReferralCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@lukkasromero/cswap-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport Countdown from 'react-countdown'\nimport CountdownCard from 'views/Presale/components/CountdownCard'\n// eslint-disable-next-line import/no-unresolved\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\n// eslint-disable-next-line import/no-unresolved\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\nconst StyleNumber = styled(Heading)`\n  font-size: 22px;\n  margin-bottom: 36px;\n`\n\n\n\nconst endCountDownRenderer = ({ days, hours, minutes, seconds, completed }) => {\n  return (\n    <>\n      <StyleNumber as=\"h3\" size=\"MD\">\n        {days > 0?`${days} Days:`:\"\"}  {hours} Hours : {minutes} Minutes : {seconds} Seconds\n      </StyleNumber>\n    </>\n  )\n}\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {/* {TranslateString(10003, 'Newsletter')} */}\n          Farms starting in\n        </Heading>\n        {/* <Timeline\n\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'Cryptoswap8',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        /> */}\n\n<Countdown date={1628200108000} renderer={endCountDownRenderer} />\n\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@lukkasromero/cswap-uikit'\n\nimport useI18n from 'hooks/useI18n'\n// eslint-disable-next-line import/no-unresolved\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport ProfitStats from './components/ProfitStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport ReferralCard from \"./components/ReferralCard\"\nimport AuditCard from \"./components/AuditCard\"\nimport FarmsStartTime from \"./components/FarmsStartTime\"\n\n\nconst Hero = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 32px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        {/* <img src=\"/images/Title Bar.png\" alt=\"cake logo\" width={950} height={225} /> */}\n      </Hero>\n      <div>\n      <FarmStakingCard />\n\n        <Cards>\n        <TwitterCard />\n          <TotalValueLockedCard />\n          <FarmsStartTime/>\n        </Cards>\n\n       <Cards>\n       <ReferralCard /> \n        <CakeStats />\n\n       </Cards>\n\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}