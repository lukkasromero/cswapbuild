{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","state/actions.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","config/constants/contracts.ts","contexts/BlockContext.tsx","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/farms.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","CSWAP","WMATIC","QUICK","WETH","quoteTokenSymbol","BUSD","WBTC","times","lpTotalInQuoteToken","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","CSWAPPerBlock","allocPoint","_hex","poolWeight","toJSON","lpTotalInBTC","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","fetchPoolsPublicDataAsync","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","value","i","length","val","BNB","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","cake","56","97","137","masterChef","sousMasterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","referral","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","call","console","log","calldata","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","getReferralAddress","sousId","tokenName","stakingTokenName","stakingTokenAddress","contractAddress","poolCategory","COMMUNITY","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","risk","lpSymbol","contracts","CAKE","fetchPoolsBlockLimits","poolsWithEnd","poolsConfig","filter","p","callsStartBlock","poolConfig","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","startBlock","endBlock","depositFee","fetchPoolsTotalStatking","nonBnbPools","bnbPool","callsNonBnbPools","callsBnbPools","cakeABI","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","totalStaked","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingCSWAP","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","blockLimits","totalStakings","liveData","blockLimit","totalStaking","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","Profit","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","refAddress","URL","location","searchParams","get","Global","fallback","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.9a44ac1c.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst valueinBTC = async() => {\n  const farmConfig = farmsConfig.find(f=>f.tokenSymbol===\"WBTC\");\n  const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n  const calls = [\n    // Balance of token in the LP contract\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress],\n    },\n    // Balance of quote token on LP contract\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress],\n    },\n    // Balance of LP tokens in the master chef contract\n    {\n      address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()],\n    },\n    // Total supply of LP tokens\n    {\n      address: lpAdress,\n      name: 'totalSupply',\n    },\n    // Token decimals\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'decimals',\n    },\n    // Quote token decimals\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'decimals',\n    },\n  ]\n\n  const [\n    tokenBalanceLP,\n    quoteTokenBlanceLP,\n    lpTokenBalanceMC,\n    lpTotalSupply,\n    tokenDecimals,\n    quoteTokenDecimals,\n  ] = await multicall(erc20, calls)\n\n  const tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(2))\n\n  return(tokenPriceVsQuote.toNumber())\n\n}\n\nconst fetchFarms = async () => {\n  \n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n\n\n    \n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n\n\n      \n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        // if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          if((farmConfig.tokenSymbol === QuoteToken.CSWAP || farmConfig.tokenSymbol === QuoteToken.WMATIC || farmConfig.tokenSymbol === QuoteToken.QUICK || farmConfig.tokenSymbol === QuoteToken.WETH)&& farmConfig.quoteTokenSymbol === QuoteToken.BUSD)\n          {\n           tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(12))\n         }\n         else if (farmConfig.tokenSymbol === QuoteToken.WBTC) {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(2))\n         } \n        else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n\n        // ??? ERROR\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      }\n      else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n        // Total value in staking in quote token value\n        // lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals))\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n           .div(new BigNumber(10).pow(quoteTokenDecimals))\n           .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      }\n      \n      const [info, totalAllocPoint, CSWAPPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'CSWAPPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        // lpTotalInBTC: lpTotalInQuoteToken.div(await valueinBTC()).toJSON(),\n        lpTotalInBTC: 0,\n\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        CSWAPPerBlock: new BigNumber(CSWAPPerBlock).toNumber(),\n      }\n    }),\n  )\n  // console.log('data: ', data)\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingCSWAP',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import { collapseTextChangeRangesAcrossMultipleVersions } from 'typescript'\nimport BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\n\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n  \n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  // const pid = 13 // BUSD-BNB LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n  return ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // TODO: add CSWAP-bnb pool\n  // const pid = 0 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n\n  return ZERO\n  // const pid = 0 // EGG-BUSD LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\n  export const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } \n      else {\n        val = new BigNumber(farm.lpTotalInQuoteToken)\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'CSWAP' = 'CSWAP',\r\n  'WBTC' = 'WBTC',\r\n  'WMATIC' = 'WMATIC',\r\n  'QUICK' = 'QUICK',\r\n  'WETH' = 'WETH',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n  137?: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  tokenDecimals?: number\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0xF952Fc3ca7325Cc27D15885d37117676d25BfdA6',\r\n    97: '',\r\n    137: '0xeC5AE5A69045eCf74c5C864d2876826BE38e7846', // CSWAP\r\n  },\r\n  masterChef: {\r\n    56: '0xe70E9185F5ea7Ba3C5d63705784D8563017f2E57',\r\n    97: '',\r\n    137: '0x7724F7c411d19047832099EAABC231D4c2aeD218' \r\n  },\r\n  sousMasterChef: {\r\n    56: '',\r\n    97: '',\r\n    137: '0xBA13f14f73e88A2Aa264EC3063b32f4b4972E226'\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n    137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270' // WMATIC\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n    137: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E',\r\n  },\r\n  busd: {\r\n    56: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n    97: '',\r\n    137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174' // USDC\r\n  },\r\n\r\n  referral:{\r\n    56: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n    97: '',\r\n    137: '0xfe71261e218c8d5aad90dc322e25ed7b4f2d5d50' // USDC\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n\n\n  calls.map((call)=>{\n    return console.log(\"callAddress\",call.address)\n  })\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getSousMasterChefAddress = () => {\n  return addresses.sousMasterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n\n\nexport const getReferralAddress = () => {\n  return addresses.referral[chainId]\n}","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n   {\n     sousId: 1,\n     tokenName: 'WMATIC',\n     stakingTokenName: QuoteToken.CSWAP,\n     stakingTokenAddress: '0xF13e6278Da0717235BFC84D535C54461e957feED',\n     contractAddress: {\n       97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n       56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n      137: '0xBA13f14f73e88A2Aa264EC3063b32f4b4972E226'\n     },\n     poolCategory: PoolCategory.COMMUNITY,\n     projectLink: 'https://pancakeswap.finance/',\n     harvest: true,\n     tokenPerBlock: '.062',\n     sortOrder: 1,\n     isFinished: false,\n     tokenDecimals: 18,\n   }\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n\r\n\r\n\r\n\r\n\r\n   {\r\n    pid: 0,\r\n    risk: 5,\r\n    lpSymbol: 'CSWAP-MATIC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x8b84F83D4336e4De9533C15c25741A0dd25d530B', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'CSWAP',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xeC5AE5A69045eCf74c5C864d2876826BE38e7846',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 1,\r\n    risk: 5,\r\n    lpSymbol: 'CSWAP-USDC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x287e51793Cce1FC6B442d246467b7C538dE56000', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.CAKE,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n\r\n\r\n\r\n  \r\n  {\r\n    pid: 2,\r\n    risk: 5,\r\n    lpSymbol: 'CSWAP-FISH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xc67e89A3586D69deD92633F384F6690f41C6100A', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'FISH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x3a3df212b7aa91aa0402b9035b098891d276572b',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.CAKE,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n\r\n\r\n  \r\n  {\r\n    pid: 3,\r\n    risk: 5,\r\n    lpSymbol: 'CSWAP',\r\n    isTokenOnly:true,\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xc67e89A3586D69deD92633F384F6690f41C6100A', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'CSWAP',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xeC5AE5A69045eCf74c5C864d2876826BE38e7846',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 4,\r\n    risk: 5,\r\n    lpSymbol: 'BNB-BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x681CA270b3A488446353fE49EeC9d9ceD6179eEa', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x7e9928afe96fefb820b85b4ce6597b8f660fe4f4',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  {\r\n    pid: 5,\r\n    risk: 5,\r\n    lpSymbol: 'ETH-MATIC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xadbF1854e5883eB8aa7BAf50705338739e558E5b', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'ETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 6,\r\n    risk: 5,\r\n    lpSymbol: 'BTC-BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xA7Acb8bEA5d79CCec1DB1a7CAe2629fF4c5A64f8', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'BTC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 7,\r\n    risk: 5,\r\n    lpSymbol: 'USDC-USDT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x2cF7252e74036d1Da831d11089D326296e64a728', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 8,\r\n    risk: 5,\r\n    lpSymbol: 'wBTC',\r\n    isTokenOnly:true,\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xA7Acb8bEA5d79CCec1DB1a7CAe2629fF4c5A64f8', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'wBTC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n  {\r\n    pid: 9,\r\n    risk: 5,\r\n    lpSymbol: 'ETH',\r\n    isTokenOnly:true,\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0xadbF1854e5883eB8aa7BAf50705338739e558E5b', // CSWAP - USDC\r\n    },\r\n    tokenSymbol: 'ETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 10,\r\n    risk: 5,\r\n    lpSymbol: 'FISH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x0df9e46c0eaedf41b9d4bbe2cea2af6e8181b033', // FISH - USDC\r\n    },\r\n    tokenSymbol: 'FISH',\r\n    isTokenOnly:true,\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x3a3df212b7aa91aa0402b9035b098891d276572b',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n  {\r\n    pid: 11,\r\n    risk: 5,\r\n    lpSymbol: 'BNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x681CA270b3A488446353fE49EeC9d9ceD6179eEa', // BNB - BUSD\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x7e9928afe96fefb820b85b4ce6597b8f660fe4f4',\r\n    },\r\n    isTokenOnly:true,\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 12,\r\n    risk: 5,\r\n    lpSymbol: 'MATIC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x160532d2536175d65c03b97b0630a9802c274dad', // MATIC - USDC\r\n    },\r\n    isTokenOnly:true,\r\n    tokenSymbol: 'MATIC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n\r\n  {\r\n    pid: 13,\r\n    risk: 5,\r\n    lpSymbol: 'MATIC-USDC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x160532d2536175d65c03b97b0630a9802c274dad', // MATIC - USDC\r\n    },\r\n    tokenSymbol: 'MATIC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '',\r\n      137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n]\r\n\r\nexport default farms\r\n","import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getWbnbAddress, getSousMasterChefAddress } from 'utils/addressHelpers'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'bonusEndBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n      // This is currently hard coded\n      depositFee: \"10\",\n    }\n  })\n}\n\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\n\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: poolConfig.stakingTokenAddress,\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((poolConfig) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getSousMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n// const masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getSousMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingCSWAP('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { ConnectorUnsupportedError } from '@binance-chain/bsc-use-wallet'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@gameswapfinance/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      // console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@gameswapfinance/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? light : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@gameswapfinance/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://quickswap.exchange/#/swap?outputCurrency=0x3FaF2f0498F09D6c0678f70138311Ae15c048fA9',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://quickswap.exchange/#/add/0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174/0x3FaF2f0498F09D6c0678f70138311Ae15c048fA9',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/nests',\n  },\n  \n  // {\n  //   label: 'Pools',\n  //   icon: 'PoolIcon',\n  //   href: '/pools',\n  // },\n  // {\n  //   label: 'Dividends',\n  //   icon: 'TicketIcon',\n  //   href: '/profit',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      // {\n      //   label: 'Github',\n      //   href: 'https://github.com/cswapdevteam/cryptoswap',\n      // },\n      {\n        label: 'Docs',\n        href: 'https://app.gitbook.com/@cryptoswap/s/cryptoswap/',\n      },\n      // {\n      //   label: 'Medium',\n      //   href: 'https://medium.com/@cswapfinance',\n      // }\n    ],\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@gameswapfinance/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://explorer-mainnet.maticvigil.com/tokens/0xF13e6278Da0717235BFC84D535C54461e957feED/token-transfers\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@gameswapfinance/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@gameswapfinance/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst Profit = lazy(() => import('./views/Profit'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n\n    const url = new URL(window.location.href)\n    const refAddress = url.searchParams.get('ref')\n    if(refAddress){\n      localStorage.setItem('ref', refAddress)\n\n    }\n  }, [account, connect])\n\n\n\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/nests\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/profit\">\n              <Profit />\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@gameswapfinance/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}